https://www.youtube.com/playlist?list=PLkVpKYNT_U9cl3hhVg_ROOlSY33uuBWZh

01 Presentación - Curso Django - OpenBootcamp

02 Instalación - Curso Django - OpenBootcamp

03 Patron de arquitectura - Curso Django - OpenBootcamp
    Patron MTV (Modelo-Template-Vista)
    • Modelo: define la estructura lógica de los datos y es el controlador de datos entre la base de datos y la Vista.
    • Template: es la capa de presentación. Django utiliza un sistema de plantillas de texto simple que guarda todo lo que el navegador muestra.
    • Vista: se comunica con la base de datos a través del Modelo y transfiere los datos a la Plantilla para su visualización.

04 Estructura de archivos - Curso Django - OpenBootcamp

    Crear Proyecto de Django:
        django-admin startproject nombre_proyecto . (el punto lo pongo para que no repita una carpeta con el mismo nombre del proyecto)

    ARCHIVOS POR DEFECTO EN TODOS LOS PROYECTOS:
    
    __INIT__.PY:
        Se crea el archivo __init__.py en todas las aplicaciones para poder ser tratado como un modulo

    MANAGE.PY:
        El archivo manage.py es una herramienta fundamental en el desarrollo de aplicaciones con Django. 
        Es un script de Python que se encarga de ejecutar diversos comandos administrativos relacionados con la gestión del proyecto, 
        la base de datos, el servidor y las aplicaciones.

        Funciones principales:

        Administración del proyecto:
            Creación de nuevas aplicaciones.
            Ejecución de migraciones de la base de datos.
            Creación de superusuarios.
            Impresión de información del proyecto.
            
        Gestión de la base de datos:
            Creación, eliminación y sincronización de la base de datos.
            Ejecución de comandos SQL.
            Aplicación de migraciones.
            
        Control del servidor:
            Iniciar, detener y reiniciar el servidor de desarrollo.
            Crear un servidor de producción.
            Administración de aplicaciones:
            Creación, eliminación e instalación de aplicaciones.
            Ejecución de comandos específicos de cada aplicación.

    ASGI.PY:
        El archivo asgi.py es un punto de entrada crucial para que los servidores web compatibles con ASGI (Asynchronous Server Gateway Interface) 
        puedan servir una aplicación Django. ASGI es un estándar que define cómo los servidores web y las aplicaciones web interactúan
        de forma asíncrona, lo que permite un mejor rendimiento y escalabilidad.

        Funciones principales:

        Punto de entrada para ASGI: Define la interfaz que el servidor web utiliza para comunicarse con la aplicación Django.
        Enrutamiento de solicitudes: Mapea las URLs a las vistas correspondientes de la aplicación.
        Manejo de diferentes tipos de aplicaciones: Permite ejecutar aplicaciones ASGI y WSGI (Web Server Gateway Interface) dentro del mismo proyecto.
        Configuración de middleware: Define qué middleware se debe ejecutar para cada solicitud.
    
    WSGI.PY:
        El archivo wsgi.py es un componente crucial para ejecutar una aplicación Django con servidores web que implementan 
        la interfaz WSGI (Web Server Gateway Interface). WSGI define un estándar para la comunicación entre servidores web y aplicaciones web,
        permitiendo la interoperabilidad entre diferentes tecnologías.

        Funciones principales:

        Punto de entrada para WSGI: Define la interfaz que el servidor web utiliza para comunicarse con la aplicación Django.
        Enrutamiento de solicitudes: Mapea las URLs a las vistas correspondientes de la aplicación.
        Manejo de diferentes tipos de aplicaciones: Permite ejecutar aplicaciones WSGI y ASGI (Asynchronous Server Gateway Interface)
        dentro del mismo proyecto.
        Configuración de middleware: Define qué middleware se debe ejecutar para cada solicitud

    SETTING.PY:
        El archivo settings.py es el archivo de configuración central de una aplicación Django. 
        Es donde se definen las variables y opciones que controlan el comportamiento de la aplicación en diferentes aspectos, como:

        Configuración de la base de datos:
            Tipo de base de datos (MySQL, PostgreSQL, etc.)
            Nombre de la base de datos
            Usuario y contraseña de la base de datos
            Host y puerto de la base de datos
            
        Configuración del servidor web:
            Puerto en el que se ejecuta la aplicación
            Modo de depuración
            Entorno de desarrollo o producción

        Configuración de aplicaciones:
            Lista de aplicaciones instaladas en el proyecto
            Clases de configuración específicas de cada aplicación

        Configuración de seguridad:
            Clave secreta para la generación de cookies y tokens
            Algoritmos de hash para contraseñas
            Permisos y restricciones de acceso

        Configuración de internacionalización:
            Idioma por defecto
            Zona horaria
            Formato de fecha y hora

        Configuración de correo electrónico:
            Servidor SMTP
            Usuario y contraseña del servidor SMTP
            Remitente por defecto

        Configuración de archivos estáticos:
            Directorio donde se almacenan los archivos estáticos
            URL pública para acceder a los archivos estáticos

    URLS.PY:
        El archivo urls.py juega un papel crucial en la configuración de una aplicación Django al definir 
        el enrutamiento de las URLs a las vistas correspondientes. 
        Es la piedra angular que permite que la aplicación responda a las solicitudes del usuario de manera organizada y eficiente.

        Funciones principales:

        Enrutamiento de URLs: Define una lista de patrones de URL que se mapean a las vistas de la aplicación.
        Importación de vistas: Permite importar las vistas desde diferentes módulos de la aplicación.
        Manejo de diferentes tipos de solicitudes: Permite definir diferentes patrones para solicitudes GET, POST, PUT, DELETE, etc.
        Configuración de nombres de URL: Asigna nombres únicos a las URLs para facilitar su uso en otras partes de la aplicación.
        Inclusión de otras configuraciones de URL: Permite dividir la configuración de URL en diferentes archivos para mayor organización.


05 Hola mundo - Curso Django - OpenBootcamp
    
    Realizamos la primera migracion (la primera vez crea la base de datos y cada vez que modifiquemos la estructura de datos):
        py manage.py migrate
    
    Ejecutar el servidor localmente:
        py manage.py runserver

    Creamos las vistas:
        Creamos el archivo views.py (contienen la logica y se definen las funciones que se necesiten)
    
    Creamos las urls
        Creamos una  url para acceder a esa vista(siempre la terminamos con /), lo hacemos en urls.py  
        dentro de holamundo  y le asignamos el mismo nombre de la funcion

    
06 Rutas con parámetros - Curso Django - OpenBootcamp
    path('adulto/<int:edad>/', views.adulto, name='adulto')
    # La vista adulto recibe un parámetro edad, lo capturamos entre corchetes angulares <>.


07 Uso de plantillas - Curso Django - OpenBootcamp
    definir ruta en 'DIRS': ['templates'] en TEMPLATES del archivo settings.py
    creamos  una carpeta llamada "templates"
    creamos  un archivo llamado simple.html dentro de templates
    para utilizarlo desde views debemos importar: from django.shortcuts import render
    creamos una funcion y devolvemos: return render(request, "simple.html", {}), la funcion render(), recibe 3 parametros(request, pagina html, contexto)


08 Uso de contextos - Curso Django - OpenBootcamp
    El contexto es un “conjunto de variables” que envías a tus templates a través de las vistas. 
    Estas variables solo pueden ser accedidas por un template específico.
    
    url definimos el path path('dinamico/<str:name>', views.dinamico, name="dinamico")
    en views.py creamos una funcion que recibe (request, name)
    definimos la variable context = {'name': name}, # guardamos un diccionario con el nombre como clave(name que recibimos de parametro) y lo pasamos al template
    retorna render(request,"plantilla.html", context)
    desde adentro dinamico.html para llamar una variable {{name}}

09 Bucles y condicionales en plantillas - Curso Django - OpenBootcamp
    En Django, puedes utilizar los bucles y condicionales de Python en tus plantillas.
    ciclo for en html y condicional if
    **********************************
      {% for elemento in categories %} <!-- recorremos la lista categories que fue creado en la funcion dinamico(views.py) -->
        {% if elemento == 'code'%} <!-- condicional if para buscar 'code' adentro de la lista -->
            <li><b>{{ elemento }}</b></li> <!-- muestra en negrita el elemento code -->
        {% else %} <!-- si no es 'code', lo muestra normal -->
            <li>{{ elemento }}</li> <!-- muestra todos los elementos de la lista categories que no son igual a 'code'-->
        {% endif %} <!-- cierra el  condicional if -->  
      {% endfor %} <!-- cierra el ciclo for despues de recorrer toda la lista -->

10 Comentarios y filtros - Curso Django - OpenBootcamp
    {# comentario #} comentario de una linea que no se pinta (oculto)

    {% comment "" %}
        Este comentario se ignora y no se muestra en pantalla
        es
        multilineas
    {% endcomment %}

11 Archivos estaticos - Curso Django - OpenBootcamp
   Archivos css, javascript, imagenes, audios, etc.
   
   en el archivo settings.py, en STATIC_URL = 'static/' definimos la ruta adonde van a estar los archivos estaticos
   creamos una carpeta llamada static en la raiz del proyecto

   en el archivo html tenemos que usar {% load static %} {# defino que se va a utilizar contenido de la carpeta static #}
   href={% static "styles.css" %} # para usar el archivo styles.css

   crear en settings.py la variable de entorno
        STATICFILES_DIRS = [ # directorio de  los archivos estáticos
            BASE_DIR /"static", #  directorio raiz  de la carpeta static en el proyecto
            '/var/www/static/' # directorio para produccion 
        ]

12 Herencia de plantillas - Curso Django - OpenBootcamp
    herencia de plantillas es una forma de reutilizar código en plantillas.
    definir rutas en settings.py
    crear carpetas en el proyecto
    crear urls
    crear vistas
    crear plantillas
    creamos la carpeta(adentro de templates) layouts,  la plantilla padre que definamos(base.html)
    en base.html definir los bloques para el contenido de cada plantilla
    en la plantilla extender {% extends "./layouts/base.html" %}
    desde la plantilla usar {% block title %} Herencia {% endblock %} para cambiar el bloque
        
13 Enlaces e inclusion - Curso Django - OpenBootcamp
    <li><a href= "{% url 'herencia' %}">Herencia</a></li>  {# link a herencia por name definido en urls.py #}
    
    modularizar el menu y footer
        crear carpeta partials adentro de layouts
        crear menu.html y footer.html
        desde base.html incluir {% include "layouts/partials/menu.html" %} 
        desde base.html incluir {% include "layouts/partials/footer.html" %} 

14 documentacion oficial - Curso Django - OpenBootcamp
    https://docs.djangoproject.com/es/5.0/

15 practica plantillas - Curso Django - OpenBootcamp
    crear una sitio con 2 paginas(portfolio de un fotografo)
        definir rutas en settings.py (templates y static)
        crear url en urls.py
        crear vistas en views.py
        crear carpetas templates y static
        crear index.html y porftolio.html adentro de carpeta templates
        crear carpeta layouts adentro de carpeta templates
        crear archivo base.html en la carpeta layouts
        crear la carpeta partials en la carpeta layouts
        en el archivo base.html definir los bloques, menu, footer
        estilos css

16 modularizacion - Curso Django - OpenBootcamp
    modularizar siempre
    se puede usar una aplicacion de un proyecto en otro proyecto
    py manage.py startapp nombre_aplicacion(comentarios)
    en settings.py agregar en INSTALLED_APPS
        'comentarios', # Agrego la aplicacion comentarios
    py manage.py check comentarios # chequea que la aplicacion este correctamente instalada
    

17 modelos de datos - Curso Django - OpenBootcamp
    Creando una clase Django convierte la clase en una tabla en la base de datos 
    y cada atributo de la clase se convierte en un campo(columna) de esa tabla en models.py

    py manage.py makemigrations (lo hacemos cada vez que modifiquemos el modelo de datos o creemos un nuevo modelo)
    luego de makemigrations, debemos  hacer py manage.py migrate django siempre crea un campo id como primary key

    crea en la base de datos la tabla comentarios_comments (nombredeaplicacion_nombredeclase)

18 delegación de rutas - Curso Django - OpenBootcamp
    crear el archivo urls.py en la aplicacion (comentarios)
    definir ruta test
    en views.py de la aplicacion crear la vista test

    en urls.py general del proyecto añadimos el nuevo path que apunta a la aplicacion(comentarios), luego incluir include en la importacion

    Para vincular las rutas de una aplicacion en el proyecto principal en urls.py del proyecto principal hay que importar
    la url de la app y agregar ahi la url de la vista


19 creacion y borrado de datos - Curso Django - OpenBootcamp
    en views.py de la aplicacion importo from .models import Comment
    en views.py de la aplicacion creo la vista que crea un nuevo comentario
    Crear:
        comment = Comment(name="Jorge", score = 5, comment = "Este es un comentario") # forma manual
        comment.save() # Guardo manualmente el objeto comment en la base de datos
        comment = Comment.objects.create(name = "Eduardo") #  Crea un objeto y guarda en la BD con los valores que le pasamos por parámetros

    Borrar:
        comment =  Comment.objects.get(id=1)  # Busco manualmente al comentario con id  1, si no existe lanza una excepción
        comment.delete() # Elimino manualmente el comentario id = 1, obtenido en el paso anterior
        comment = Comment.objects.filter(id=2).delete()  # Filtro los comentarios por su ID y elimino todos que coincidan
    


20 estructura y claves foraneas - Curso Django - OpenBootcamp
    Una clave foránea en Django es una relación entre dos modelos que representa una conexión de uno a muchos. 
    Es decir, un modelo (el "hijo") referencia a otro modelo (el "padre") para establecer una dependencia o asociación.
    En el modelo hijo, se define la clave foránea con el atributo ForeignKey
    creo los modelos Author y Entry
    author = models.ForeignKey(Author, on_delete = models.CASCADE) 
    # Defino la clave foranea de la clase Author en la clase Entry, va a asignar el id del autor que escriba la entrada
    # on_delete = models.CASCADE es para que cuando se borre un autor, todos sus entries tambien lo hagan



21 seeding y paquetes - Curso Django - OpenBootcamp
    Repositorio:
        https://github.com/Brobin/django-seed

    Instalar:
        pip install django-seed

    Agregar aplicacion:
        INSTALLED_APPS = (
        ...
        'django_seed',
        )
    
    py manage.py seed post(nombre de la aplicacion) --number=50 # crea 50 entradas en las tablas de post
    

22 consulta de datos I - Curso Django - OpenBootcamp
    definir la consulta en views.py
        # obtener todos los elementos
        authors = Author.objects.all()

    pasar contexto authors
            return render(request, 'post/queries.html',{'authors':authors})

    pintar en queries.html
        <h3> Todos los Autores </h3>
        {% for author in authors %}
            <li>{{author.name}} ({{author.email}})</li>
        {% endfor %} 

    
23 consulta de datos II - Curso Django - OpenBootcamp

    Operadores en las vistas:
        (nombre del campo)__lte  : menor o igual que
        (nombre del campo)__lt   : menor que
        (nombre del campo)__gt  : mayor que
        (nombre del campo)__gte  : mayor o igual que
        (nombre del campo)__exact : exactamente igual a
        (nombre del campo)__contains : contiene
        (nombre del campo)__in   : entre varios valores (listado separados por comas)

    # obtener todos los elementos ordenados
    orders = Author.objects.all().order_by(('email')) # SELECT * FROM authors ORDER BY  email;

    # obtener datos filtrados por condicion
    filtered = Author.objects.filter(id__lte=15) #SELECT * FROM authors WHERE id<=15;
    
    # obtener todos los autores que contienen en su nombre la palabra yes
    contains = Author.objects.filter(name__contains="yes") #SELECT * FROM Author WHERE name LIKE '%yes%';


24 actualizacion de datos - Curso Django - OpenBootcamp

en url de post:
        path('update/', views.update, name='update')

en views.py de post:
    def update(request):
        author = Author.objects.get(id = 1) # SELECT * FROM authors WHERE id=1;
        author.name = "Jorge" # UPDATE authors SET name='Jorge Orellana' WHERE id=1;
        author.email = "jeo20@hotmail.com" # UPDATE  authors SET email='email@email.com.ar' WHERE id=1;
        author.save() #  UPDATE authors SET name='Jorge Orellana', email='email@email.com.ar' WHERE id=1;
        return HttpResponse("Modificado") #  Retorna una respuesta HTTP con un mensaje de texto

25 relaciones uno a uno - Curso Django - OpenBootcamp
    crear aplicacion onetoone
    en settings.py agregar la aplicacion onetoone
    en urls.py general definir el path de la aplicacion onetoone
    crear urls.py en onetoone
    crear modelos en models.py

    place =  models.OneToOneField(Place, on_delete=models.CASCADE, primary_key = True) #Llave foranea a la clase Place
    # models.OneToOneField(nombre del modelo para aplicar la relacion (obligatorio),on_delete=models.CASCADE, primary_key = True)

26 relaciones muchos a uno - Curso Django - OpenBootcamp
    Articulo - Reportero
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE) # clave foranea a la tabla Reporter
    # models.ForeignKey(nombre del modelo para aplicar la relacion (obligatorio),on_delete=models
    el nombre de la tabla siempre es (nombre de la aplicacion)_(nombre de la clase) manytoone_reporter

    # reportero
    rep = Reporter(first_name="Jorge", last_name="Orellana", email="jorge@gmail.com")
    rep.save()
    
    # articulo 1
    art1 =Article(headline="Noticias 1", pub_date= date(2021,4,17), reporter=rep)
    art1.save()

    #Articulo a Reportero
    result = art1.reporter.first_name +" "+ art1.reporter.last_name # devuelve  el nombre del periodista que creo el primer articulo

    #Reportero a Articulo
    result = rep.article_set.all( ) # devuelve todos los articulos del periodista Jorge Orellana

27 relaciones muchos a muchos - Curso Django - OpenBootcamp
    Publicacion - Articulo

    publications = models.ManyToManyField(Publication) #Relación muchos a muchos con la clase Publication
    # para la relacion muchos a muchos no hay que definir un metodo de borrado on_delete porque se almacenan en una tabla aparte
    primero guardar las tablas(modelos) que vamos a utilizar
    django crea una tercera tabla(modelos) para relacionar las 2 tablas creadas:
        manytomany_article (tabla1)
        manytomany_publication (tabla2)
        manytomany_article_publication (contiene article_id y publication_id y relaciona 2 tablas article y publication)
    

28 conexion con postgresql - Curso Django - OpenBootcamp

29 practica diseno modelo de datos - Curso Django - OpenBootcamp

30 practica codificacion modelo de datos - Curso Django - OpenBootcamp

31 formulario html get

32 formulario html post

33 formularios a traves de clases

34 widget en formularios

35 validacion de formularios

36 formularios a partir de modelos

37 practica formularios

38 administracion de grupos y usuarios

39 registrar modelos en panel de administracion

40 uso de model admin

41 practica enunciado estructura y modelos

42 practica formularios estaticos y layouts

43 practica admin buscador y listas

44 practica crud contactos

45 practica crud contactos parte 2

46 practica crud tareas

47 practica refactorizacion y busqueda por iniciales

48 reutilizacion de aplicaciones

49 utilidades mensajes y parametros opcionales

50 utilidades y repaso final